from typing import Literal

from fastapi import APIRouter, HTTPException
from fastapi.params import Depends
from sqlalchemy.orm import Session

from db.depends import get_db
from db.models import Category
from schemas import CategorySchema

router = APIRouter(
    prefix="/categories",
    tags=["categories"],
)


@router.post("/", response_model=CategorySchema)
def create_category(category_data: CategorySchema, db: Session = Depends(get_db)):
    new_category = Category(category=category_data.category,
                            father_category_id=category_data.father_category_id)
    db.add(new_category)
    db.commit()
    db.refresh(new_category)
    return new_category


CategorySchema.model_rebuild()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_category_tree(parent_id: int | None = None, db: Session = Depends(get_db), depth: int = 1) -> list[
    CategorySchema]:
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö father_category_id —Ä–∞–≤–µ–Ω parent_id.
    categories = db.query(Category).filter(Category.father_category_id == parent_id).all()
    result = []
    for category in categories:
        # –ï—Å–ª–∏ –µ—â—ë –º–æ–∂–Ω–æ —Å–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∏–∂–µ (–≥–ª—É–±–∏–Ω–∞ –±–æ–ª—å—à–µ 0), —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        subcategories = get_category_tree(category.id, db, depth - 1) if depth > 0 else []
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å—Ö–µ–º—ã —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
        result.append(CategorySchema(
            id=category.id,
            category=category.category,
            father_category_id=category.father_category_id,
            subcategories=subcategories
        ))
    return result


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≥–ª—É–±–∏–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏.
@router.get("/", response_model=list[CategorySchema])
def get_categories(
        father_category_id: int | None = None,  # –ï—Å–ª–∏ None ‚Äì –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        depth: Literal[0, 1, 2] = 1,
        # –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏: 0 ‚Äì —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, 1 ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–º—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, 2 ‚Äì –µ—â–µ –≥–ª—É–±–∂–µ –∏ —Ç.–¥.
        db: Session = Depends(get_db)
):
    return get_category_tree(father_category_id, db, depth)


@router.put("/{category_id}/", response_model=CategorySchema)
def update_category(category_id: int, category_data: CategorySchema, db: Session = Depends(get_db)):
    db_category = db.query(Category).filter(category_id == Category.id).first()
    if not db_category:
        raise HTTPException(status_code=404, detail="Category not found")

    db_category.category = category_data.category
    db_category.father_category_id = category_data.father_category_id

    db.commit()
    db.refresh(db_category)

    return db_category


@router.delete("/{category_id}/",
               response_model=CategorySchema)
def delete_category(category_id: int, db: Session = Depends(get_db)):
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(status_code=404, detail="Category not found")

    print(f"üõë –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category.category} (ID={category_id})")

    #  –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = db.query(Category).filter(Category.father_category_id == category_id).all()

    #  –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for subcategory in subcategories:
        print(f"üîÑ –£–¥–∞–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {subcategory.category} (ID={subcategory.id})")
        delete_category(subcategory.id, db)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤!

    db.delete(category)
    db.commit()

    print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category.category} (ID={category_id}) —É–¥–∞–ª–µ–Ω–∞.")
    return {"message": f"Category {category.category} and all subcategories deleted"}
